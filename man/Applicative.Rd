% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Control.Applicative.r
\name{Applicative}
\alias{Applicative}
\title{Applicative class. This also defines the interface for \code{Alternative}.}
\description{
Applicative class. This also defines the interface for \code{Alternative}.

Applicative class. This also defines the interface for \code{Alternative}.
}
\section{Super class}{
\code{\link[rhaskell:Functor]{rhaskell::Functor}} -> \code{Applicative}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-pure}{\code{Applicative$pure()}}
\item \href{#method-apply}{\code{Applicative$apply()}}
\item \href{#method-empty}{\code{Applicative$empty()}}
\item \href{#method-alt}{\code{Applicative$alt()}}
\item \href{#method-clone}{\code{Applicative$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="rhaskell" data-topic="Functor" data-id="fmap">}\href{../../rhaskell/html/Functor.html#method-fmap}{\code{rhaskell::Functor$fmap()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="rhaskell" data-topic="Functor" data-id="initialize">}\href{../../rhaskell/html/Functor.html#method-initialize}{\code{rhaskell::Functor$initialize()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-pure"></a>}}
\if{latex}{\out{\hypertarget{method-pure}{}}}
\subsection{Method \code{pure()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Applicative$pure(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{element

\code{pure :: a -> f a }
Sequential application, i.e. (<*>)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-apply"></a>}}
\if{latex}{\out{\hypertarget{method-apply}{}}}
\subsection{Method \code{apply()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Applicative$apply(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{Applicative element

\code{apply :: f (a -> b) (=self) -> f a -> f b}
Identity of \code{alt}

\code{empty :: f a}
An associative binary operation

\code{alt :: f a (=self) -> f a -> f a}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-empty"></a>}}
\if{latex}{\out{\hypertarget{method-empty}{}}}
\subsection{Method \code{empty()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Applicative$empty()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-alt"></a>}}
\if{latex}{\out{\hypertarget{method-alt}{}}}
\subsection{Method \code{alt()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Applicative$alt(other)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Applicative$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
